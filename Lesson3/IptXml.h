#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace Lesson3 {
    using namespace System;
    ref class Database;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"Database"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class Database : public ::System::Data::DataSet {
        public : ref class MovieDataTable;
        public : ref class ActorsDataTable;
        public : ref class ActorDataTable;
        public : ref class MovieRow;
        public : ref class ActorsRow;
        public : ref class ActorRow;
        public : ref class MovieRowChangeEvent;
        public : ref class ActorsRowChangeEvent;
        public : ref class ActorRowChangeEvent;
        
        private: Lesson3::Database::MovieDataTable^  tableMovie;
        
        private: Lesson3::Database::ActorsDataTable^  tableActors;
        
        private: Lesson3::Database::ActorDataTable^  tableActor;
        
        private: ::System::Data::DataRelation^  relationMovie_Actors;
        
        private: ::System::Data::DataRelation^  relationActors_Actor;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void MovieRowChangeEventHandler(::System::Object^  sender, Lesson3::Database::MovieRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ActorsRowChangeEventHandler(::System::Object^  sender, Lesson3::Database::ActorsRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ActorRowChangeEventHandler(::System::Object^  sender, Lesson3::Database::ActorRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        Database();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        Database(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property Lesson3::Database::MovieDataTable^  Movie {
            Lesson3::Database::MovieDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property Lesson3::Database::ActorsDataTable^  Actors {
            Lesson3::Database::ActorsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property Lesson3::Database::ActorDataTable^  Actor {
            Lesson3::Database::ActorDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeMovie();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeActors();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeActor();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class MovieDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnmedium;
            
            private: ::System::Data::DataColumn^  columnName;
            
            private: ::System::Data::DataColumn^  columnYear;
            
            private: ::System::Data::DataColumn^  columnOver18;
            
            private: ::System::Data::DataColumn^  columnMovie_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::MovieRowChangeEventHandler^  MovieRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::MovieRowChangeEventHandler^  MovieRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::MovieRowChangeEventHandler^  MovieRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::MovieRowChangeEventHandler^  MovieRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            MovieDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            MovieDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            MovieDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  mediumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  NameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  YearColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Over18Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Movie_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property Lesson3::Database::MovieRow^  default [::System::Int32 ] {
                Lesson3::Database::MovieRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddMovieRow(Lesson3::Database::MovieRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            Lesson3::Database::MovieRow^  AddMovieRow(System::String^  medium, System::String^  Name, System::String^  Year, 
                        System::String^  Over18);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            Lesson3::Database::MovieRow^  NewMovieRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveMovieRow(Lesson3::Database::MovieRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ActorsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnActors_Id;
            
            private: ::System::Data::DataColumn^  columnMovie_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::ActorsRowChangeEventHandler^  ActorsRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::ActorsRowChangeEventHandler^  ActorsRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::ActorsRowChangeEventHandler^  ActorsRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::ActorsRowChangeEventHandler^  ActorsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Actors_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Movie_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property Lesson3::Database::ActorsRow^  default [::System::Int32 ] {
                Lesson3::Database::ActorsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddActorsRow(Lesson3::Database::ActorsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            Lesson3::Database::ActorsRow^  AddActorsRow(Lesson3::Database::MovieRow^  parentMovieRowByMovie_Actors);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            Lesson3::Database::ActorsRow^  NewActorsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveActorsRow(Lesson3::Database::ActorsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ActorDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnActor_Column;
            
            private: ::System::Data::DataColumn^  columnActors_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::ActorRowChangeEventHandler^  ActorRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::ActorRowChangeEventHandler^  ActorRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::ActorRowChangeEventHandler^  ActorRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event Lesson3::Database::ActorRowChangeEventHandler^  ActorRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Actor_ColumnColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Actors_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property Lesson3::Database::ActorRow^  default [::System::Int32 ] {
                Lesson3::Database::ActorRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddActorRow(Lesson3::Database::ActorRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            Lesson3::Database::ActorRow^  AddActorRow(System::String^  Actor_Column, Lesson3::Database::ActorsRow^  parentActorsRowByActors_Actor);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            Lesson3::Database::ActorRow^  NewActorRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveActorRow(Lesson3::Database::ActorRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class MovieRow : public ::System::Data::DataRow {
            
            private: Lesson3::Database::MovieDataTable^  tableMovie;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            MovieRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  medium {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Year {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Over18 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Movie_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsYearNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetYearNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< Lesson3::Database::ActorsRow^  >^  GetActorsRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ActorsRow : public ::System::Data::DataRow {
            
            private: Lesson3::Database::ActorsDataTable^  tableActors;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Actors_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Movie_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property Lesson3::Database::MovieRow^  MovieRow {
                Lesson3::Database::MovieRow^  get();
                System::Void set(Lesson3::Database::MovieRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsMovie_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetMovie_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< Lesson3::Database::ActorRow^  >^  GetActorRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ActorRow : public ::System::Data::DataRow {
            
            private: Lesson3::Database::ActorDataTable^  tableActor;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Actor_Column {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Actors_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property Lesson3::Database::ActorsRow^  ActorsRow {
                Lesson3::Database::ActorsRow^  get();
                System::Void set(Lesson3::Database::ActorsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsActor_ColumnNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetActor_ColumnNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsActors_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetActors_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class MovieRowChangeEvent : public ::System::EventArgs {
            
            private: Lesson3::Database::MovieRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            MovieRowChangeEvent(Lesson3::Database::MovieRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property Lesson3::Database::MovieRow^  Row {
                Lesson3::Database::MovieRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ActorsRowChangeEvent : public ::System::EventArgs {
            
            private: Lesson3::Database::ActorsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorsRowChangeEvent(Lesson3::Database::ActorsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property Lesson3::Database::ActorsRow^  Row {
                Lesson3::Database::ActorsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ActorRowChangeEvent : public ::System::EventArgs {
            
            private: Lesson3::Database::ActorRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ActorRowChangeEvent(Lesson3::Database::ActorRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property Lesson3::Database::ActorRow^  Row {
                Lesson3::Database::ActorRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace Lesson3 {
    
    
    inline Database::Database() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &Lesson3::Database::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline Database::Database(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &Lesson3::Database::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"Movie"] != nullptr) {
                __super::Tables->Add((gcnew Lesson3::Database::MovieDataTable(ds->Tables[L"Movie"])));
            }
            if (ds->Tables[L"Actors"] != nullptr) {
                __super::Tables->Add((gcnew Lesson3::Database::ActorsDataTable(ds->Tables[L"Actors"])));
            }
            if (ds->Tables[L"Actor"] != nullptr) {
                __super::Tables->Add((gcnew Lesson3::Database::ActorDataTable(ds->Tables[L"Actor"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &Lesson3::Database::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline Lesson3::Database::MovieDataTable^  Database::Movie::get() {
        return this->tableMovie;
    }
    
    inline Lesson3::Database::ActorsDataTable^  Database::Actors::get() {
        return this->tableActors;
    }
    
    inline Lesson3::Database::ActorDataTable^  Database::Actor::get() {
        return this->tableActor;
    }
    
    inline ::System::Data::SchemaSerializationMode Database::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void Database::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  Database::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  Database::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void Database::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  Database::Clone() {
        Lesson3::Database^  cln = (cli::safe_cast<Lesson3::Database^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean Database::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean Database::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void Database::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"Movie"] != nullptr) {
                __super::Tables->Add((gcnew Lesson3::Database::MovieDataTable(ds->Tables[L"Movie"])));
            }
            if (ds->Tables[L"Actors"] != nullptr) {
                __super::Tables->Add((gcnew Lesson3::Database::ActorsDataTable(ds->Tables[L"Actors"])));
            }
            if (ds->Tables[L"Actor"] != nullptr) {
                __super::Tables->Add((gcnew Lesson3::Database::ActorDataTable(ds->Tables[L"Actor"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  Database::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void Database::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void Database::InitVars(::System::Boolean initTable) {
        this->tableMovie = (cli::safe_cast<Lesson3::Database::MovieDataTable^  >(__super::Tables[L"Movie"]));
        if (initTable == true) {
            if (this->tableMovie != nullptr) {
                this->tableMovie->InitVars();
            }
        }
        this->tableActors = (cli::safe_cast<Lesson3::Database::ActorsDataTable^  >(__super::Tables[L"Actors"]));
        if (initTable == true) {
            if (this->tableActors != nullptr) {
                this->tableActors->InitVars();
            }
        }
        this->tableActor = (cli::safe_cast<Lesson3::Database::ActorDataTable^  >(__super::Tables[L"Actor"]));
        if (initTable == true) {
            if (this->tableActor != nullptr) {
                this->tableActor->InitVars();
            }
        }
        this->relationMovie_Actors = this->Relations[L"Movie_Actors"];
        this->relationActors_Actor = this->Relations[L"Actors_Actor"];
    }
    
    inline ::System::Void Database::InitClass() {
        this->DataSetName = L"Database";
        this->Prefix = L"";
        this->Namespace = L"http://www.johnysparadise.ic.cz/pokus";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableMovie = (gcnew Lesson3::Database::MovieDataTable());
        __super::Tables->Add(this->tableMovie);
        this->tableActors = (gcnew Lesson3::Database::ActorsDataTable());
        __super::Tables->Add(this->tableActors);
        this->tableActor = (gcnew Lesson3::Database::ActorDataTable());
        __super::Tables->Add(this->tableActor);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Movie_Actors", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMovie->Movie_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableActors->Movie_IdColumn}));
        this->tableActors->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Actors_Actor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableActors->Actors_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableActor->Actors_IdColumn}));
        this->tableActor->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationMovie_Actors = (gcnew ::System::Data::DataRelation(L"Movie_Actors", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMovie->Movie_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableActors->Movie_IdColumn}, false));
        this->relationMovie_Actors->Nested = true;
        this->Relations->Add(this->relationMovie_Actors);
        this->relationActors_Actor = (gcnew ::System::Data::DataRelation(L"Actors_Actor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableActors->Actors_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableActor->Actors_IdColumn}, false));
        this->relationActors_Actor->Nested = true;
        this->Relations->Add(this->relationActors_Actor);
    }
    
    inline ::System::Boolean Database::ShouldSerializeMovie() {
        return false;
    }
    
    inline ::System::Boolean Database::ShouldSerializeActors() {
        return false;
    }
    
    inline ::System::Boolean Database::ShouldSerializeActor() {
        return false;
    }
    
    inline ::System::Void Database::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  Database::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        Lesson3::Database^  ds = (gcnew Lesson3::Database());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline Database::MovieDataTable::MovieDataTable() {
        this->TableName = L"Movie";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline Database::MovieDataTable::MovieDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline Database::MovieDataTable::MovieDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  Database::MovieDataTable::mediumColumn::get() {
        return this->columnmedium;
    }
    
    inline ::System::Data::DataColumn^  Database::MovieDataTable::NameColumn::get() {
        return this->columnName;
    }
    
    inline ::System::Data::DataColumn^  Database::MovieDataTable::YearColumn::get() {
        return this->columnYear;
    }
    
    inline ::System::Data::DataColumn^  Database::MovieDataTable::Over18Column::get() {
        return this->columnOver18;
    }
    
    inline ::System::Data::DataColumn^  Database::MovieDataTable::Movie_IdColumn::get() {
        return this->columnMovie_Id;
    }
    
    inline ::System::Int32 Database::MovieDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline Lesson3::Database::MovieRow^  Database::MovieDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<Lesson3::Database::MovieRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void Database::MovieDataTable::AddMovieRow(Lesson3::Database::MovieRow^  row) {
        this->Rows->Add(row);
    }
    
    inline Lesson3::Database::MovieRow^  Database::MovieDataTable::AddMovieRow(System::String^  medium, System::String^  Name, 
                System::String^  Year, System::String^  Over18) {
        Lesson3::Database::MovieRow^  rowMovieRow = (cli::safe_cast<Lesson3::Database::MovieRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {medium, Name, Year, 
            Over18, nullptr};
        rowMovieRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowMovieRow);
        return rowMovieRow;
    }
    
    inline ::System::Collections::IEnumerator^  Database::MovieDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  Database::MovieDataTable::Clone() {
        Lesson3::Database::MovieDataTable^  cln = (cli::safe_cast<Lesson3::Database::MovieDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  Database::MovieDataTable::CreateInstance() {
        return (gcnew Lesson3::Database::MovieDataTable());
    }
    
    inline ::System::Void Database::MovieDataTable::InitVars() {
        this->columnmedium = __super::Columns[L"medium"];
        this->columnName = __super::Columns[L"Name"];
        this->columnYear = __super::Columns[L"Year"];
        this->columnOver18 = __super::Columns[L"Over18"];
        this->columnMovie_Id = __super::Columns[L"Movie_Id"];
    }
    
    inline ::System::Void Database::MovieDataTable::InitClass() {
        this->columnmedium = (gcnew ::System::Data::DataColumn(L"medium", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmedium);
        this->columnName = (gcnew ::System::Data::DataColumn(L"Name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnName);
        this->columnYear = (gcnew ::System::Data::DataColumn(L"Year", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnYear);
        this->columnOver18 = (gcnew ::System::Data::DataColumn(L"Over18", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnOver18);
        this->columnMovie_Id = (gcnew ::System::Data::DataColumn(L"Movie_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnMovie_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnMovie_Id}, 
                true)));
        this->columnmedium->AllowDBNull = false;
        this->columnmedium->Namespace = L"";
        this->columnName->AllowDBNull = false;
        this->columnOver18->AllowDBNull = false;
        this->columnMovie_Id->AutoIncrement = true;
        this->columnMovie_Id->AllowDBNull = false;
        this->columnMovie_Id->Unique = true;
    }
    
    inline Lesson3::Database::MovieRow^  Database::MovieDataTable::NewMovieRow() {
        return (cli::safe_cast<Lesson3::Database::MovieRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  Database::MovieDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew Lesson3::Database::MovieRow(builder));
    }
    
    inline ::System::Type^  Database::MovieDataTable::GetRowType() {
        return Lesson3::Database::MovieRow::typeid;
    }
    
    inline ::System::Void Database::MovieDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->MovieRowChanged(this, (gcnew Lesson3::Database::MovieRowChangeEvent((cli::safe_cast<Lesson3::Database::MovieRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::MovieDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->MovieRowChanging(this, (gcnew Lesson3::Database::MovieRowChangeEvent((cli::safe_cast<Lesson3::Database::MovieRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::MovieDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->MovieRowDeleted(this, (gcnew Lesson3::Database::MovieRowChangeEvent((cli::safe_cast<Lesson3::Database::MovieRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::MovieDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->MovieRowDeleting(this, (gcnew Lesson3::Database::MovieRowChangeEvent((cli::safe_cast<Lesson3::Database::MovieRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::MovieDataTable::RemoveMovieRow(Lesson3::Database::MovieRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  Database::MovieDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        Lesson3::Database^  ds = (gcnew Lesson3::Database());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"MovieDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline Database::ActorsDataTable::ActorsDataTable() {
        this->TableName = L"Actors";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline Database::ActorsDataTable::ActorsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline Database::ActorsDataTable::ActorsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  Database::ActorsDataTable::Actors_IdColumn::get() {
        return this->columnActors_Id;
    }
    
    inline ::System::Data::DataColumn^  Database::ActorsDataTable::Movie_IdColumn::get() {
        return this->columnMovie_Id;
    }
    
    inline ::System::Int32 Database::ActorsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline Lesson3::Database::ActorsRow^  Database::ActorsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<Lesson3::Database::ActorsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void Database::ActorsDataTable::AddActorsRow(Lesson3::Database::ActorsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline Lesson3::Database::ActorsRow^  Database::ActorsDataTable::AddActorsRow(Lesson3::Database::MovieRow^  parentMovieRowByMovie_Actors) {
        Lesson3::Database::ActorsRow^  rowActorsRow = (cli::safe_cast<Lesson3::Database::ActorsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentMovieRowByMovie_Actors != nullptr) {
            columnValuesArray[1] = parentMovieRowByMovie_Actors[4];
        }
        rowActorsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowActorsRow);
        return rowActorsRow;
    }
    
    inline ::System::Collections::IEnumerator^  Database::ActorsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  Database::ActorsDataTable::Clone() {
        Lesson3::Database::ActorsDataTable^  cln = (cli::safe_cast<Lesson3::Database::ActorsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  Database::ActorsDataTable::CreateInstance() {
        return (gcnew Lesson3::Database::ActorsDataTable());
    }
    
    inline ::System::Void Database::ActorsDataTable::InitVars() {
        this->columnActors_Id = __super::Columns[L"Actors_Id"];
        this->columnMovie_Id = __super::Columns[L"Movie_Id"];
    }
    
    inline ::System::Void Database::ActorsDataTable::InitClass() {
        this->columnActors_Id = (gcnew ::System::Data::DataColumn(L"Actors_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnActors_Id);
        this->columnMovie_Id = (gcnew ::System::Data::DataColumn(L"Movie_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnMovie_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnActors_Id}, 
                true)));
        this->columnActors_Id->AutoIncrement = true;
        this->columnActors_Id->AllowDBNull = false;
        this->columnActors_Id->Unique = true;
    }
    
    inline Lesson3::Database::ActorsRow^  Database::ActorsDataTable::NewActorsRow() {
        return (cli::safe_cast<Lesson3::Database::ActorsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  Database::ActorsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew Lesson3::Database::ActorsRow(builder));
    }
    
    inline ::System::Type^  Database::ActorsDataTable::GetRowType() {
        return Lesson3::Database::ActorsRow::typeid;
    }
    
    inline ::System::Void Database::ActorsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ActorsRowChanged(this, (gcnew Lesson3::Database::ActorsRowChangeEvent((cli::safe_cast<Lesson3::Database::ActorsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::ActorsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ActorsRowChanging(this, (gcnew Lesson3::Database::ActorsRowChangeEvent((cli::safe_cast<Lesson3::Database::ActorsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::ActorsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ActorsRowDeleted(this, (gcnew Lesson3::Database::ActorsRowChangeEvent((cli::safe_cast<Lesson3::Database::ActorsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::ActorsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ActorsRowDeleting(this, (gcnew Lesson3::Database::ActorsRowChangeEvent((cli::safe_cast<Lesson3::Database::ActorsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::ActorsDataTable::RemoveActorsRow(Lesson3::Database::ActorsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  Database::ActorsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        Lesson3::Database^  ds = (gcnew Lesson3::Database());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ActorsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline Database::ActorDataTable::ActorDataTable() {
        this->TableName = L"Actor";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline Database::ActorDataTable::ActorDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline Database::ActorDataTable::ActorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  Database::ActorDataTable::Actor_ColumnColumn::get() {
        return this->columnActor_Column;
    }
    
    inline ::System::Data::DataColumn^  Database::ActorDataTable::Actors_IdColumn::get() {
        return this->columnActors_Id;
    }
    
    inline ::System::Int32 Database::ActorDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline Lesson3::Database::ActorRow^  Database::ActorDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<Lesson3::Database::ActorRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void Database::ActorDataTable::AddActorRow(Lesson3::Database::ActorRow^  row) {
        this->Rows->Add(row);
    }
    
    inline Lesson3::Database::ActorRow^  Database::ActorDataTable::AddActorRow(System::String^  Actor_Column, Lesson3::Database::ActorsRow^  parentActorsRowByActors_Actor) {
        Lesson3::Database::ActorRow^  rowActorRow = (cli::safe_cast<Lesson3::Database::ActorRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {Actor_Column, nullptr};
        if (parentActorsRowByActors_Actor != nullptr) {
            columnValuesArray[1] = parentActorsRowByActors_Actor[0];
        }
        rowActorRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowActorRow);
        return rowActorRow;
    }
    
    inline ::System::Collections::IEnumerator^  Database::ActorDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  Database::ActorDataTable::Clone() {
        Lesson3::Database::ActorDataTable^  cln = (cli::safe_cast<Lesson3::Database::ActorDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  Database::ActorDataTable::CreateInstance() {
        return (gcnew Lesson3::Database::ActorDataTable());
    }
    
    inline ::System::Void Database::ActorDataTable::InitVars() {
        this->columnActor_Column = __super::Columns[L"Actor_Column"];
        this->columnActors_Id = __super::Columns[L"Actors_Id"];
    }
    
    inline ::System::Void Database::ActorDataTable::InitClass() {
        this->columnActor_Column = (gcnew ::System::Data::DataColumn(L"Actor_Column", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
        __super::Columns->Add(this->columnActor_Column);
        this->columnActors_Id = (gcnew ::System::Data::DataColumn(L"Actors_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnActors_Id);
    }
    
    inline Lesson3::Database::ActorRow^  Database::ActorDataTable::NewActorRow() {
        return (cli::safe_cast<Lesson3::Database::ActorRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  Database::ActorDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew Lesson3::Database::ActorRow(builder));
    }
    
    inline ::System::Type^  Database::ActorDataTable::GetRowType() {
        return Lesson3::Database::ActorRow::typeid;
    }
    
    inline ::System::Void Database::ActorDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ActorRowChanged(this, (gcnew Lesson3::Database::ActorRowChangeEvent((cli::safe_cast<Lesson3::Database::ActorRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::ActorDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ActorRowChanging(this, (gcnew Lesson3::Database::ActorRowChangeEvent((cli::safe_cast<Lesson3::Database::ActorRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::ActorDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ActorRowDeleted(this, (gcnew Lesson3::Database::ActorRowChangeEvent((cli::safe_cast<Lesson3::Database::ActorRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::ActorDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ActorRowDeleting(this, (gcnew Lesson3::Database::ActorRowChangeEvent((cli::safe_cast<Lesson3::Database::ActorRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void Database::ActorDataTable::RemoveActorRow(Lesson3::Database::ActorRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  Database::ActorDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        Lesson3::Database^  ds = (gcnew Lesson3::Database());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ActorDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline Database::MovieRow::MovieRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableMovie = (cli::safe_cast<Lesson3::Database::MovieDataTable^  >(this->Table));
    }
    
    inline System::String^  Database::MovieRow::medium::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableMovie->mediumColumn]));
    }
    inline System::Void Database::MovieRow::medium::set(System::String^  value) {
        this[this->tableMovie->mediumColumn] = value;
    }
    
    inline System::String^  Database::MovieRow::Name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableMovie->NameColumn]));
    }
    inline System::Void Database::MovieRow::Name::set(System::String^  value) {
        this[this->tableMovie->NameColumn] = value;
    }
    
    inline System::String^  Database::MovieRow::Year::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMovie->YearColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Year\' in table \'Movie\' is DBNull.", e));
        }
    }
    inline System::Void Database::MovieRow::Year::set(System::String^  value) {
        this[this->tableMovie->YearColumn] = value;
    }
    
    inline System::String^  Database::MovieRow::Over18::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableMovie->Over18Column]));
    }
    inline System::Void Database::MovieRow::Over18::set(System::String^  value) {
        this[this->tableMovie->Over18Column] = value;
    }
    
    inline System::Int32 Database::MovieRow::Movie_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableMovie->Movie_IdColumn]));
    }
    inline System::Void Database::MovieRow::Movie_Id::set(System::Int32 value) {
        this[this->tableMovie->Movie_IdColumn] = value;
    }
    
    inline ::System::Boolean Database::MovieRow::IsYearNull() {
        return this->IsNull(this->tableMovie->YearColumn);
    }
    
    inline ::System::Void Database::MovieRow::SetYearNull() {
        this[this->tableMovie->YearColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< Lesson3::Database::ActorsRow^  >^  Database::MovieRow::GetActorsRows() {
        if (this->Table->ChildRelations[L"Movie_Actors"] == nullptr) {
            return gcnew cli::array< Lesson3::Database::ActorsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< Lesson3::Database::ActorsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Movie_Actors"])));
        }
    }
    
    
    inline Database::ActorsRow::ActorsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableActors = (cli::safe_cast<Lesson3::Database::ActorsDataTable^  >(this->Table));
    }
    
    inline System::Int32 Database::ActorsRow::Actors_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableActors->Actors_IdColumn]));
    }
    inline System::Void Database::ActorsRow::Actors_Id::set(System::Int32 value) {
        this[this->tableActors->Actors_IdColumn] = value;
    }
    
    inline System::Int32 Database::ActorsRow::Movie_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableActors->Movie_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Movie_Id\' in table \'Actors\' is DBNull.", 
                e));
        }
    }
    inline System::Void Database::ActorsRow::Movie_Id::set(System::Int32 value) {
        this[this->tableActors->Movie_IdColumn] = value;
    }
    
    inline Lesson3::Database::MovieRow^  Database::ActorsRow::MovieRow::get() {
        return (cli::safe_cast<Lesson3::Database::MovieRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Movie_Actors"])));
    }
    inline System::Void Database::ActorsRow::MovieRow::set(Lesson3::Database::MovieRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Movie_Actors"]);
    }
    
    inline ::System::Boolean Database::ActorsRow::IsMovie_IdNull() {
        return this->IsNull(this->tableActors->Movie_IdColumn);
    }
    
    inline ::System::Void Database::ActorsRow::SetMovie_IdNull() {
        this[this->tableActors->Movie_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< Lesson3::Database::ActorRow^  >^  Database::ActorsRow::GetActorRows() {
        if (this->Table->ChildRelations[L"Actors_Actor"] == nullptr) {
            return gcnew cli::array< Lesson3::Database::ActorRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< Lesson3::Database::ActorRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Actors_Actor"])));
        }
    }
    
    
    inline Database::ActorRow::ActorRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableActor = (cli::safe_cast<Lesson3::Database::ActorDataTable^  >(this->Table));
    }
    
    inline System::String^  Database::ActorRow::Actor_Column::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableActor->Actor_ColumnColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Actor_Column\' in table \'Actor\' is DBNull.", 
                e));
        }
    }
    inline System::Void Database::ActorRow::Actor_Column::set(System::String^  value) {
        this[this->tableActor->Actor_ColumnColumn] = value;
    }
    
    inline System::Int32 Database::ActorRow::Actors_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableActor->Actors_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Actors_Id\' in table \'Actor\' is DBNull.", 
                e));
        }
    }
    inline System::Void Database::ActorRow::Actors_Id::set(System::Int32 value) {
        this[this->tableActor->Actors_IdColumn] = value;
    }
    
    inline Lesson3::Database::ActorsRow^  Database::ActorRow::ActorsRow::get() {
        return (cli::safe_cast<Lesson3::Database::ActorsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Actors_Actor"])));
    }
    inline System::Void Database::ActorRow::ActorsRow::set(Lesson3::Database::ActorsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Actors_Actor"]);
    }
    
    inline ::System::Boolean Database::ActorRow::IsActor_ColumnNull() {
        return this->IsNull(this->tableActor->Actor_ColumnColumn);
    }
    
    inline ::System::Void Database::ActorRow::SetActor_ColumnNull() {
        this[this->tableActor->Actor_ColumnColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean Database::ActorRow::IsActors_IdNull() {
        return this->IsNull(this->tableActor->Actors_IdColumn);
    }
    
    inline ::System::Void Database::ActorRow::SetActors_IdNull() {
        this[this->tableActor->Actors_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline Database::MovieRowChangeEvent::MovieRowChangeEvent(Lesson3::Database::MovieRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Lesson3::Database::MovieRow^  Database::MovieRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction Database::MovieRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline Database::ActorsRowChangeEvent::ActorsRowChangeEvent(Lesson3::Database::ActorsRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Lesson3::Database::ActorsRow^  Database::ActorsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction Database::ActorsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline Database::ActorRowChangeEvent::ActorRowChangeEvent(Lesson3::Database::ActorRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Lesson3::Database::ActorRow^  Database::ActorRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction Database::ActorRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
